// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RentElectricCar.API.Contexts;

namespace RentElectricCar.API.Migrations
{
    [DbContext(typeof(RentACarDbContext))]
    [Migration("20220204030231_2nSeedDataAdded")]
    partial class _2nSeedDataAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RentElectricCar.API.Entities.Car", b =>
                {
                    b.Property<Guid>("CarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MileAge")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfDoors")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfSeats")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ProductionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Transmission")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CarId");

                    b.HasIndex("LocationId");

                    b.ToTable("CarsForRent");

                    b.HasData(
                        new
                        {
                            CarId = new Guid("b70385e1-11dc-4fe5-ad0a-f40000d8cde8"),
                            ColorName = "Red",
                            LocationId = new Guid("404a9219-6a83-43ef-9a2d-0f7891a6db50"),
                            MileAge = 50000,
                            NumberOfDoors = 5,
                            NumberOfSeats = 5,
                            ProductionDate = new DateTimeOffset(new DateTime(2020, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Transmission = "Automatic"
                        },
                        new
                        {
                            CarId = new Guid("3da18906-b85d-4460-bcef-42da4bffdb35"),
                            ColorName = "White",
                            LocationId = new Guid("404a9219-6a83-43ef-9a2d-0f7891a6db50"),
                            MileAge = 86000,
                            NumberOfDoors = 3,
                            NumberOfSeats = 2,
                            ProductionDate = new DateTimeOffset(new DateTime(2018, 2, 17, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Transmission = "Manual"
                        });
                });

            modelBuilder.Entity("RentElectricCar.API.Entities.Location", b =>
                {
                    b.Property<Guid>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            LocationId = new Guid("07f456ff-0e3e-4d4c-a82c-a5ffb58d2835"),
                            CityName = "Lappeenranta",
                            RegionName = "South Karelia"
                        },
                        new
                        {
                            LocationId = new Guid("777b5fbf-726b-46f7-83c0-fc2e1cea39ce"),
                            CityName = "Imatra",
                            RegionName = "South Karelia"
                        },
                        new
                        {
                            LocationId = new Guid("737fe335-bbcc-42b3-b43a-1ac4ca446ef1"),
                            CityName = "Jyväskylä",
                            RegionName = "Central Finland"
                        },
                        new
                        {
                            LocationId = new Guid("ba22a556-afd4-4d71-a1a6-0997775308bc"),
                            CityName = "Jämsä",
                            RegionName = "Central Finland"
                        },
                        new
                        {
                            LocationId = new Guid("f90a1aaa-4360-4419-848e-47cf740cbc88"),
                            CityName = "Laukaa",
                            RegionName = "Central Finland"
                        },
                        new
                        {
                            LocationId = new Guid("d224be3e-e9c1-44a6-a262-a2e422ecdf5a"),
                            CityName = "Tampere",
                            RegionName = "Pirkanmaa"
                        },
                        new
                        {
                            LocationId = new Guid("8d5e3909-3785-4d7a-bde9-103aefd9f163"),
                            CityName = "Ylöjärvi",
                            RegionName = "Pirkanmaa"
                        },
                        new
                        {
                            LocationId = new Guid("886d8a9c-5f25-44c5-a8c8-b2921afad367"),
                            CityName = "Nokia",
                            RegionName = "Pirkanmaa"
                        },
                        new
                        {
                            LocationId = new Guid("f0f3c209-1afb-4d77-a1e4-41b980bbc39c"),
                            CityName = "Kangasala",
                            RegionName = "Pirkanmaa"
                        },
                        new
                        {
                            LocationId = new Guid("0179ab63-376f-47bc-a1e0-b7939aeeca26"),
                            CityName = "Kotka",
                            RegionName = "Kymenlaakso"
                        },
                        new
                        {
                            LocationId = new Guid("65cb8f32-5444-4fd4-b816-8f57cde20e18"),
                            CityName = "Kouvola",
                            RegionName = "Kymenlaakso"
                        },
                        new
                        {
                            LocationId = new Guid("8a603c82-7c0b-4de9-bdcd-db669cf48c06"),
                            CityName = "Helsinki",
                            RegionName = "Uusimaa"
                        },
                        new
                        {
                            LocationId = new Guid("f4a9d00d-d7d2-46f5-a53a-b5a5e250244b"),
                            CityName = "Espoo",
                            RegionName = "Uusimaa"
                        },
                        new
                        {
                            LocationId = new Guid("1b05e9f4-eacf-4edd-aea0-3b1ab0efe524"),
                            CityName = "Vantaa",
                            RegionName = "Uusimaa"
                        },
                        new
                        {
                            LocationId = new Guid("8735b362-158f-48cc-ba5f-351a87add184"),
                            CityName = "Porvoo",
                            RegionName = "Uusimaa"
                        },
                        new
                        {
                            LocationId = new Guid("fabac37b-9c3b-452d-8626-272be26bdecd"),
                            CityName = "Lohja",
                            RegionName = "Uusimaa"
                        },
                        new
                        {
                            LocationId = new Guid("27a1a764-db3d-478f-bbc3-190bbf93a5e7"),
                            CityName = "Turku",
                            RegionName = "Southwest Finland"
                        },
                        new
                        {
                            LocationId = new Guid("6ac8b9de-17ca-4d42-90f4-fd3b5c64774c"),
                            CityName = "Salo",
                            RegionName = "Southwest Finland"
                        },
                        new
                        {
                            LocationId = new Guid("ae71ff9e-c117-4fa4-a431-4a3af7680a6b"),
                            CityName = "Kaarina",
                            RegionName = "Southwest Finland"
                        },
                        new
                        {
                            LocationId = new Guid("404a9219-6a83-43ef-9a2d-0f7891a6db50"),
                            CityName = "Rovaniemi",
                            RegionName = "Lapland"
                        });
                });

            modelBuilder.Entity("RentElectricCar.API.Entities.Car", b =>
                {
                    b.HasOne("RentElectricCar.API.Entities.Location", "Location")
                        .WithMany("Cars")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("RentElectricCar.API.Entities.Location", b =>
                {
                    b.Navigation("Cars");
                });
#pragma warning restore 612, 618
        }
    }
}
